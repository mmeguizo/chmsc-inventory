{"version":3,"sources":["webpack:///node_modules/angular2-toaster/src/toast.component.d.ts.ToastComponent.html","webpack:///node_modules/angular2-toaster/src/toaster-container.component.d.ts.ToasterContainerComponent.html","webpack:///src/app/login/login-routing.modules.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/modals/test/test.component.html","webpack:///src/app/login/modals/test/test.component.ts"],"names":["routes","path","component","LoginRoutingModule","LoginComponent","dialogService","formBuilder","authService","router","toastr","loader","processing","config","showCloseButton","tapToDismiss","timeout","createForm","form","group","username","required","password","controls","enable","disable","user","disableForm","get","value","login","subscribe","data","success","pop","message","enableForm","console","log","storeUserData","token","userToken","CurrentlyloggedIn","setTimeout","navigate","role","logout","open","context","title","LoginModule","TestComponent","ref","close"],"mappings":"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","file":"app-login-login-module-ngfactory-es5.js","sourcesContent":["\n        <i class=\"toaster-icon\" [ngClass]=\"iconClass\"></i>\n        <div class=\"toast-content\">\n            <div [ngClass]=\"titleClass\">{{toast.title}}</div>\n            <div [ngClass]=\"messageClass\" [ngSwitch]=\"toast.bodyOutputType\">\n                <div *ngSwitchCase=\"bodyOutputType.Component\" #componentBody></div>\n                <div *ngSwitchCase=\"bodyOutputType.TrustedHtml\" [innerHTML]=\"safeBodyHtml\"></div>\n                <div *ngSwitchCase=\"bodyOutputType.Default\">{{toast.body}}</div>\n            </div>\n        </div>\n        <div class=\"toast-close-button\" *ngIf=\"toast.showCloseButton\" (click)=\"click($event, toast)\"\n            [innerHTML]=\"safeCloseHtml\">\n        </div>","\n        <div id=\"toast-container\" [ngClass]=\"[toasterconfig.positionClass]\">\n            <div toastComp *ngFor=\"let toast of toasts\" class=\"toast\" [toast]=\"toast\"\n                [@toastState]=\"toasterconfig.animation\"\n                [iconClass]=\"toasterconfig.iconClasses[toast.type]\"\n                [titleClass]=\"toasterconfig.titleClass\"\n                [messageClass]=\"toasterconfig.messageClass\"\n                [ngClass]=\"toasterconfig.typeClasses[toast.type]\"\n                (click)=\"click(toast)\" (clickEvent)=\"childClick($event)\"\n                (mouseover)=\"stopTimer(toast)\" (mouseout)=\"restartTimer(toast)\">\n            </div>\n        </div>\n        ","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule, } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\nimport { NotAuthGuard } from '../guard/notAuth.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n    // canActivate: [NotAuthGuard]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","<nb-layout>\r\n  <nb-layout-column>\r\n    <div class=\"wrapper\">\r\n      <div class=\"container\">\r\n        <h2 style=\"z-index: 9999999\">Chmsc Inventory</h2>\r\n        <div class=\"form-text error\">\r\n          {{ msg }}\r\n          <toaster-container [toasterconfig]=\"config\">\r\n          </toaster-container>\r\n        </div>\r\n\r\n        <!-- <form class=\"form\" #f=\"ngForm\">\r\n        <input ng-model=\"login\" type=\"text\" placeholder=\"Username\" [(ngModel)]=\"username\" id=\"username\" #userName=\"ngModel\" name=\"username\" required>\r\n        <input ng-model=\"pwd\" type=\"password\" placeholder=\"Password\" [(ngModel)]=\"password\"  #passWord=\"ngModel\" name=\"password\" id=\"password\" required>\r\n        <button type=\"submit\" id=\"login-button\" (click)=\" onLoginSubmit()\" [disabled]=\"f.invalid\" [nbSpinner]=\"\" nbSpinnerStatus=\"success\">Login</button>\r\n      </form> -->\r\n        <form [formGroup]=\"form\" (submit)=\"onLoginSubmit()\">\r\n          <div class=\"form-group\">\r\n            <label style=\"color:white\" for=\"username\">Username</label>\r\n            <div\r\n              [ngClass]=\"{'has-error': form.controls.username.errors && form.controls.username.dirty, 'has-success': form.controls.username.valid && form.controls.username.dirty }\">\r\n              <input class=\"form-control\" type=\"text\" name=\"username\" formControlName=\"username\" />\r\n              <ul class=\"help-block\">\r\n                <li *ngIf=\"form.controls.username.errors?.required && form.controls.username.dirty\">This field is\r\n                  required.</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label style=\"color:white\" for=\"password\">Password</label>\r\n            <div\r\n              [ngClass]=\"{'has-error': form.controls.password.errors && form.controls.password.dirty, 'has-success': form.controls.password.valid && form.controls.password.dirty }\">\r\n              <input class=\"form-control\" type=\"password\" name=\"password\" formControlName=\"password\" />\r\n              <ul class=\"help-block\">\r\n                <li *ngIf=\"form.controls.password.errors?.required && form.controls.password.dirty\">This field is\r\n                  required.</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <input [disabled]=\"!form.valid || processing\" class=\"btn btn-primary\" type=\"submit\" value=\"Login\" />\r\n        </form>\r\n\r\n      </div>\r\n    </div>\r\n  </nb-layout-column>\r\n</nb-layout>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, AbstractControl, FormBuilder, Validators, NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n// import { routerTransition } from '../router.animation';\r\n// import { AuthService } from '../@core/services/auth.service';\r\n// import { SharedGlobalService } from '../@core/services/shared.global.service';\r\nimport { NbDialogService } from '@nebular/theme';\r\nimport { ToasterService, ToasterConfig } from 'angular2-toaster';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { TestComponent } from './modals/test/test.component';\r\n// import { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n  // animations: [routerTransition()]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  username: String;\r\n  password: String;\r\n  msg: String;\r\n  loader = false;\r\n  disableSubmit;\r\n  conn;\r\n  userID;\r\n\r\n  messageClass;\r\n  message;\r\n  processing = false;\r\n  form: FormGroup;\r\n\r\n  public config: ToasterConfig =\r\n    new ToasterConfig({\r\n      showCloseButton: true,\r\n      tapToDismiss: false,\r\n      timeout: 0\r\n    });\r\n\r\n\r\n  constructor(\r\n    // public sgs: SharedGlobalService,\r\n    // public authService: AuthService,\r\n    private dialogService: NbDialogService,\r\n\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastr: ToasterService,\r\n\r\n  ) {\r\n    // sgs.setBrowserTitle.emit('Login');\r\n    this.createForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  createForm() {\r\n    this.form = this.formBuilder.group({\r\n      username: ['', Validators.required], // Username field\r\n      password: ['', Validators.required] // Password field\r\n    });\r\n  }\r\n\r\n  enableForm() {\r\n    this.form.controls['username'].enable(); // Enable username field\r\n    this.form.controls['password'].enable(); // Enable password field\r\n  }\r\n\r\n  disableForm() {\r\n    this.form.controls['username'].disable(); // Disable username field\r\n    this.form.controls['password'].disable(); // Disable password field\r\n  }\r\n  Submit() {\r\n    const user = {\r\n      username: this.username,\r\n      password: this.password,\r\n    };\r\n\r\n    // this.sgs.request('post', 'user/authenticate', user, async (response) => {\r\n    //     if( response.success ){\r\n    //         if( await this.authService.setToken(response.data) ){\r\n    //             this.authService.login();\r\n    //         }else{\r\n    //             this.msg = 'LocalStorage not supported. Token not set!';\r\n    //         }\r\n    //     }else{\r\n    //         this.msg = response.message;\r\n    //     }\r\n    // });\r\n  }\r\n  // Functiont to submit form and login user\r\n  onLoginSubmit() {\r\n    this.processing = true; // Used to submit button while is being processed\r\n    this.disableForm(); // Disable form while being process\r\n    // Create user object from user's input\r\n    const user = {\r\n      username: this.form.get('username').value, // Username input field\r\n      password: this.form.get('password').value // Password input field\r\n    }\r\n\r\n    // Function to send login data to API\r\n    this.authService.login(user).subscribe((data: any) => {\r\n\r\n      // Check if response was a success or error\r\n      if (!data.success) {\r\n        // this.messageClass = 'alert alert-danger'; // Set bootstrap error class\r\n        // this.message = data.message; // Set error message\r\n        //  this.toastr.error('Failed', data.message);\r\n        this.toastr.pop('error', 'Failed', data.message);\r\n\r\n\r\n        this.processing = false; // Enable submit button\r\n        this.enableForm(); // Enable form for editting\r\n\r\n\r\n\r\n      } else {\r\n        // this.messageClass = 'alert alert-success'; // Set bootstrap success class\r\n        // this.message = data.message; // Set success message\r\n        //  this.toastr.success('Success', data.message);\r\n        this.toastr.pop('success', 'Success', data.message);\r\n\r\n        console.log({ login: data.data });\r\n\r\n\r\n        // Function to store user's token in client local storage\r\n        this.authService.storeUserData(data.token, data.user, data.userToken, data.data);\r\n\r\n\r\n        if (this.authService.CurrentlyloggedIn()) {\r\n          console.log(this.authService.CurrentlyloggedIn());\r\n          setTimeout(() => {\r\n            this.router.navigate([data.role]); // Navigate to dashboard view\r\n          }, 1000);\r\n\r\n        } else {\r\n          this.authService.logout()\r\n          this.router.navigate(['login']); // Navigate to dashboard view\r\n        }\r\n\r\n        // After 2 seconds, redirect to dashboard page\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  showBootstrapModal() {\r\n    // this.sgs.Modal({\r\n    //     header: `Notice`,\r\n    //     content: `\r\n    //     test\r\n    //     `,\r\n    //     buttonName: 'close'\r\n    //   }, { size: 'md'});\r\n  }\r\n\r\n  showMaterialModal() {\r\n    this.dialogService.open(TestComponent, {\r\n      context: {\r\n        title: 'This is a title passed to the dialog component',\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginRoutingModule } from './login-routing.modules';\r\nimport { LoginComponent } from './login.component';\r\nimport { ThemeModule } from '../@theme/theme.module';\r\nimport { NbSpinnerModule } from '@nebular/theme';\r\nimport { NbCardModule, NbButtonModule } from '@nebular/theme';\r\nimport { NbLayoutModule } from '@nebular/theme';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { TestComponent } from './modals/test/test.component';\r\nimport { ToasterModule } from 'angular2-toaster';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ThemeModule,\r\n    LoginRoutingModule,\r\n    NbSpinnerModule,\r\n    NbCardModule,\r\n    NbLayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NbButtonModule,\r\n    ToasterModule.forChild()\r\n\r\n  ],\r\n  declarations: [LoginComponent, TestComponent],\r\n  entryComponents: [\r\n    TestComponent\r\n  ]\r\n})\r\nexport class LoginModule { }\r\n","<nb-card>\r\n    <nb-card-header>{{ title }}</nb-card-header>\r\n    <nb-card-body>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-12\">\r\n          TEST\r\n        </div>\r\n      </div>\r\n    </nb-card-body>\r\n    <nb-card-footer>\r\n      <button nbButton matRipple hero status=\"primary\" (click)=\"dismiss()\">Dismiss Dialog</button>\r\n    </nb-card-footer>\r\n</nb-card>\r\n  ","import { Component, OnInit, Input } from '@angular/core';\r\nimport { NbDialogRef } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-test',\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.scss']\r\n})\r\nexport class TestComponent implements OnInit {\r\n\r\n  @Input() title: String;\r\n\r\n  constructor(protected ref: NbDialogRef<TestComponent>) {}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  dismiss() {\r\n    this.ref.close();\r\n  }\r\n  \r\n}\r\n\r\n"]}